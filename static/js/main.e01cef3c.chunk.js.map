{"version":3,"sources":["logo.svg","components/cards/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.components.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","width","height","src","monster","id","name","CardList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","useState","users","setUsers","search","setSearch","useEffect","fetch","then","res","json","data","catch","err","console","log","filteredUsers","filter","toLowerCase","includes","e","target","value","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0PAAe,I,kBCIFA,EAAO,SAACC,GACjB,OACI,sBAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAI,WAAWC,MAAM,QAAQC,OAAO,QAAQC,IAAG,+BAA0BL,EAAMM,QAAQC,GAAxC,gBACpD,6BAAKP,EAAMM,QAAQE,WCHlBC,G,MAAW,SAACT,GACrB,OACI,qBAAKC,UAAU,YAAf,SACKD,EAAMU,SAASC,KAAI,SAAAL,GAChB,OAAO,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,WCJ7BK,G,MAAY,SAAC,GAAiC,IAAhCC,EAA+B,EAA/BA,YAAaC,EAAkB,EAAlBA,aACpC,OACI,uBAAOb,UAAU,SAASc,KAAK,SAASF,YAAaA,EAAaG,SAAUF,MC0BrEG,EA3BH,WAAO,IAAD,EACUC,mBAAS,IADnB,mBACTC,EADS,KACFC,EADE,OAEYF,mBAAS,IAFrB,mBAETG,EAFS,KAEDC,EAFC,KAIhBC,qBAAU,WACRC,MAAM,8CACLC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GAAI,OAAIR,EAASQ,MACtBC,OAAM,SAAAC,GACLC,QAAQC,IAAIF,QAEd,IAEF,IAAMG,EAAgBd,EAAMe,QAAQ,SAAA5B,GAAO,OAAIA,EAAQE,KAAK2B,cAAcC,SAASf,MAKnF,OACE,sBAAKpB,UAAU,MAAf,UACE,kDACA,cAAC,EAAD,CAAWY,YAAY,kBAAkBC,aANxB,SAACuB,GACpBf,EAAUe,EAAEC,OAAOC,UAMjB,cAAC,EAAD,CAAU7B,SAAUuB,QChBXO,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBjB,MAAK,YAAkD,IAA/CkB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.e01cef3c.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React from \"react\";\nimport './card.style.css';\n\n\nexport const Card = (props) => {\n    return(\n        <div className='card-container'>\n            <img alt=\"monsters\" width=\"180px\" height=\"180px\" src={`https://robohash.org/${props.monster.id}{?set=set2`} />\n            <h2>{props.monster.name}</h2>\n        </div>\n    )\n}","import React from 'react';\nimport { Card} from '../cards/card.component';\n\nimport './card-list.css';\n\nexport const CardList = (props) => {\n    return(\n        <div className='card-list'>\n            {props.monsters.map(monster => {\n                return <Card key={monster.id} monster={monster}/>\n            })}\n        </div>\n    )\n}","import React from \"react\";\n\nimport './search-box.style.css'; \n\n\nexport const SearchBox = ({placeholder, handleChange}) => {\n    return(\n        <input className='search' type=\"search\" placeholder={placeholder} onChange={handleChange} />\n    )\n}","import logo from './logo.svg';\nimport './App.css';\nimport {CardList} from './components/card-list/card-list.component';\nimport {SearchBox} from './components/search-box/search-box.components';\nimport { useEffect, useState } from 'react';\n\nconst App = () => { \n  const [users, setUsers] = useState([]);\n  const [search, setSearch] = useState(\"\");\n\n  useEffect(()=> {\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(res => res.json())\n    .then(data => setUsers(data))\n    .catch(err => {\n      console.log(err);\n    })\n  },[])\n\n  const filteredUsers = users.filter((monster => monster.name.toLowerCase().includes(search)));\n\n  const handleChange = (e) => {\n    setSearch(e.target.value);\n  }\n  return (\n    <div className=\"App\">\n      <h1>Monsters Rolodex</h1>\n      <SearchBox placeholder=\"search monsters\" handleChange={handleChange} />\n      <CardList monsters={filteredUsers} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}